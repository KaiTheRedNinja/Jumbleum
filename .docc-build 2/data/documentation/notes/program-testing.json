{
  "abstract" : [
    {
      "text" : "Testing a program to ensure it does what is expected",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Notes\/documentation\/Home",
        "doc:\/\/Notes\/documentation\/Notes\/Computing"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Notes\/documentation\/Notes\/Program-Testing"
  },
  "kind" : "article",
  "metadata" : {
    "images" : [
      {
        "identifier" : "Checkmark.png",
        "type" : "icon"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Program Testing"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Data validation techniques",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Validating input data",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Designing test cases for normal, error, and boundary conditions",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Understanding different types of errors",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Translators, interpreters and compilers",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Debugging techniques",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Validating-input-data",
          "level" : 2,
          "text" : "Validating input data",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Did you know that we need to validate input data? This is because some people are idiots for not inputting data correctly.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Or maybe because you are an idiot for not explicitly telling them what to input correctly. To stop pointing fingers and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "preventing that program from crashing, we have validation checks to make everyone happy.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "Length check",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " - Check that the number of characters in a value meets certain requirements (example:",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Wordle requires inputs to have 5 characters, along with other things)",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Definition",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "Range check",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " - Limits the input to a particular range of values (common among numerical values)",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "(example: Inputting test score into a computer, the score should be between 0 and 100 inclusive)",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Definition",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "Presence check",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " - Some inputs may be optional. The program should perform this check to ensure that",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "all the required inputs are provided. Also useful to check if a value even exists at all. When it comes to inputs, check",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "if it does not equal to “” (empty string).",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Definition",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "Format check",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " - Some inputs are required to satisfy additional complex requirements such as following a",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "particular pattern. This can be the datatype, or how data should be entered (example: a date format should comprise of 2",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "digits, followed by a colon, followed by another 2 digits)",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Definition",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "To validate, use a while loop and if statements\/try except to validate. If it works, break the while loop. If it doesn’t,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then give an appropriate message (such as “Please input only numerical digits.”) and iterate. You may use “continue” if",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "validation fails and there’s no point in trying to test other checks.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Check-Digits",
          "level" : 2,
          "text" : "Check Digits",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Check digit - An additional digit or letter added to the end of a sequence of digits that is intended to be read by or",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "entered into a computer manually.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The check digit is mathematically related to the original sequence of digits so that simple input errors, such as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "accidentally swapping two digits or wrongly entering a digit, would break this mathematical relationship and hence be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "detected.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Check digit algorithms are generally designed to capture human transcription errors.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "After the digits have been manually entered, the system will calculate (using an algorithm) whether the expected",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mathematical relationship is true. If the relationship is still true, it is likely that the numbers were entered",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "correctly. Otherwise, the computer can ask for the numbers to be re-entered and checked again.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the check digit is a letter, it would usually need to be converted to a number so that it can be used in the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "algorithm to check the sequence.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Check digit examples (the final digit in these codes):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "UPC (Universal Product Code, tracks trade items)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "EAN (International Article Number,",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "GLN (Global Location Number)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "GTIN (Global Trade Item Number, tracks shipment)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Numbers administered by GS1",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "ISBN 10 \/ ISBN 13 (International Standard Book Number)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Notable algorithms:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Luhn algorithm (1954) by IBM scientist Hans Peter Luhn",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "items" : [
                    {
                      "content" : [
                        {
                          "inlineContent" : [
                            {
                              "text" : "Credit card number",
                              "type" : "text"
                            }
                          ],
                          "type" : "paragraph"
                        }
                      ]
                    },
                    {
                      "content" : [
                        {
                          "inlineContent" : [
                            {
                              "text" : "Canadian, Greek, Israeli, South African and Swedish ID",
                              "type" : "text"
                            }
                          ],
                          "type" : "paragraph"
                        }
                      ]
                    }
                  ],
                  "type" : "unorderedList"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Verhoeff algorithm (1969) by Dutch mathematician Jacobus Verhoeff",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "items" : [
                    {
                      "content" : [
                        {
                          "inlineContent" : [
                            {
                              "text" : "The first decimal check digit algorithm which detects all single-digit errors, and all transposition errors",
                              "type" : "text"
                            },
                            {
                              "text" : " ",
                              "type" : "text"
                            },
                            {
                              "text" : "involving two adjacent digits.",
                              "type" : "text"
                            }
                          ],
                          "type" : "paragraph"
                        }
                      ]
                    },
                    {
                      "content" : [
                        {
                          "inlineContent" : [
                            {
                              "text" : "Uses 3 tables, a multiplication table d, an inverse table inv, and a permutation table p.",
                              "type" : "text"
                            }
                          ],
                          "type" : "paragraph"
                        }
                      ]
                    }
                  ],
                  "type" : "unorderedList"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Damm algorithm (2004) by H. Michael Damm (PhD dissertation)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "items" : [
                    {
                      "content" : [
                        {
                          "inlineContent" : [
                            {
                              "text" : "Similar to the Verhoeff algorithm",
                              "type" : "text"
                            }
                          ],
                          "type" : "paragraph"
                        }
                      ]
                    },
                    {
                      "content" : [
                        {
                          "inlineContent" : [
                            {
                              "text" : "Does not have the dedicatedly constructed permutations and its position-specific powers of the Verhoeff scheme.",
                              "type" : "text"
                            }
                          ],
                          "type" : "paragraph"
                        }
                      ]
                    }
                  ],
                  "type" : "unorderedList"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Program-Errors",
          "level" : 2,
          "text" : "Program Errors",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here is a table of the types of errors one may encounter:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Error",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Type of bug",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "When is it detected",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "What caused them",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Syntax",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Incorrect source code that does not follow the rules of the language",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "When the compiler or interpreter tries to translate the source code to machine code",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Incorrect spelling or sequence of symbols in source code.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Runtime",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Errors detected while a program is running",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "While the program is being run. Usually causes the program to crash or hang.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Incorrect use of commands, input data that has not been properly validated or conditions occurring outside of the program’s control, such as running out of memory.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logic",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "The program",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "While the program is being run",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Algorithm is incomplete or incorrect",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "Crash",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " - Sudden stop of a program due to an error",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Definition: ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "Hang",
                      "type" : "text"
                    }
                  ],
                  "type" : "strong"
                },
                {
                  "text" : " - Unresponsiveness of a program due to an error",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Definition",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Example of syntax error: Forgetting to indent a line in a while loop",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Example of runtime error: Dividing by zero, performing string operations on integers",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Example of logic error: (insert example that your code works, but your algorithm sucks so it does the wrong thing)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Bugs - Defects in a program that causes it to behave in an unintended manner",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Definition: Debugging - The act of identifying and removing defects from a program",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Definition",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Common-debugging-techniques",
          "level" : 2,
          "text" : "Common debugging techniques",
          "type" : "heading"
        },
        {
          "anchor" : "Using-intermittent-print-statements",
          "level" : 3,
          "text" : "Using intermittent print statements",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Printing certain variables at different locations to figure out where the code crashes, and if variables were in the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "correct format or were being processed correctly by the program. Tracking the progress of",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Testing-the-program-in-small-chunks-or-by-parts",
          "level" : 3,
          "text" : "Testing the program in small chunks or by parts",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Separating the code into different sections and testing each section separately to determine the location of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Done by commenting out sections of code",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Conditions-for-Test-Cases",
          "level" : 2,
          "text" : "Conditions for Test Cases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are 3 types of conditions for when testing a program:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Normal Condition - Input data is what is expected (example: Jimmy buys 3 watermelons from the watermelon shop)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Boundary Condition - Input data is at the limit of what the program is designed for, or where special handling of the",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "input data is required (example: Jimmy buys 9223372036854775807 watermelons from the watermelon shop, or 1 for positive",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "integers)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Error Condition - Input data is not what the program is designed for, and should normally be rejected",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "(example: Jimmy buys −1 lead pipes from the watermelon shop)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Algorith-Efficiency",
          "level" : 2,
          "text" : "Algorith Efficiency",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "In computer science, the Big O notation is used to classify functions (algorithms) according to their time and space",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "complexity based on a growing input size.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "It is used in the analysis of an algorithm by classifying them based on:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Time complexity (amount of time required to run the algorithm)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Space complexity (the amount of RAM or HDD space required to run the algorithm) as the input size grows.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Big O usually only provides the upper bounds of the growth rate of an algorithm.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following is a very generalised method of obtaining Big O of a function (there are methods that are a lot more mathematically rigorous)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Big-O-Example",
          "level" : 3,
          "text" : "Big O Example",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "We have this function to get the sum of numbers in an array",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "def func1(arr):",
            "    total = 0",
            "    for i in arr:",
            "        total += i",
            "    return total"
          ],
          "syntax" : "python",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Assume the compiler executes each similar statement in a constant time, so a statement “a=3” would take the same amount of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "time (microseconds) regardless of where it appears in the entire code)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Assume initializing the total takes constant time A",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Adding to total is B",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Returning the value is C",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "func1 takes a time of (A+B*(number of elements in array)+C)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Now, we must ABSTRACT the growing expression",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Step 1: PURGE THE CONSTANTS",
                  "type" : "text"
                }
              ],
              "type" : "strong"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Now we have (number of elements in array*B)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Step 2: PURGE THE COEFFICIENTS",
                  "type" : "text"
                }
              ],
              "type" : "strong"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Now we have (number of elements in array)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Since input size is universally denoted as n in Big O notation, the Big O of func1 is O(n), which has a linear growth rate.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Example O functions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Notation",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Name",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Example",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(1)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Constant",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Constant lookup table",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(log(n))",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logarithmic",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Binary search",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O((log(n))^c), c > 1",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Polylogarithmic",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Matrix chain ordering (effectively multiplying matricesnig)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(n)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Linear",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Finding an item in an unsorted array",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(nlog(n))",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Linearithmic",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Heap and merge sort",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(n^2)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Quadratic",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Bubble and insertion sort",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(n^c), c > 2",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Polynomial",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Maximum matching of bipartite graphs",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(c^n), c > 1",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Exponential",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Travelling Salesman Problem using dynamic programming",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "O(n!)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Factorial",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "TSP using brute force (listing out all combinations)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Notes\/documentation\/Notes\/Algorithm-Design",
        "doc:\/\/Notes\/documentation\/Notes\/Program-Development"
      ],
      "title" : "Abstraction and Algorithms"
    }
  ]
, 
"references": {
"Checkmark.png": {
  "alt" : "Checkmark",
  "identifier" : "Checkmark.png",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "1x",
        "light"
      ],
      "url" : "\/images\/Checkmark.png"
    }
  ]
},
"doc://Notes/documentation/Home": {
  "abstract" : [
    {
      "text" : "Notes. A lot of them. A jumble colosseum of notes. Jumbleum.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Home",
  "kind" : "article",
  "role" : "collection",
  "title" : "Jumbleum",
  "type" : "topic",
  "url" : "\/documentation\/home"
},
"doc://Notes/documentation/Notes/Algorithm-Design": {
  "abstract" : [
    {
      "text" : "Set of step-by-step instructions for solving a problem (textbook definition)",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Notes\/Algorithm-Design",
  "images" : [
    {
      "identifier" : "Checkmark.png",
      "type" : "icon"
    }
  ],
  "kind" : "article",
  "role" : "article",
  "title" : "Algorithm Design",
  "type" : "topic",
  "url" : "\/documentation\/notes\/algorithm-design"
},
"doc://Notes/documentation/Notes/Computing": {
  "abstract" : [
    {
      "text" : "Basic computing technology and systems, concepts, algorithms, techniques and tools",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Notes\/Computing",
  "images" : [
    {
      "identifier" : "Checkmark.png",
      "type" : "icon"
    }
  ],
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Computing",
  "type" : "topic",
  "url" : "\/documentation\/notes\/computing"
},
"doc://Notes/documentation/Notes/Program-Development": {
  "abstract" : [
    {
      "text" : "The process of developing a program",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Notes\/Program-Development",
  "images" : [
    {
      "identifier" : "Checkmark.png",
      "type" : "icon"
    }
  ],
  "kind" : "article",
  "role" : "article",
  "title" : "Program Development",
  "type" : "topic",
  "url" : "\/documentation\/notes\/program-development"
}
}
}