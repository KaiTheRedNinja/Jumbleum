{
  "abstract" : [
    {
      "text" : "I am groot. (Branches… get it???)",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Notes\/documentation\/Home",
        "doc:\/\/Notes\/documentation\/Notes\/NP",
        "doc:\/\/Notes\/documentation\/Notes\/Programming"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Notes\/documentation\/Notes\/2-If-Statements"
  },
  "kind" : "article",
  "metadata" : {
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "If Statements"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This document contains the entirety of chapter 2, because they’re all so short it doesn’t make sense to split them up.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "2.1 If statements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Describe Sequential and Selection structure",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Describe the operation of if statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Explain the difference between = and ==",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Write programs that use if statement to solve simple problems",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "2.2 If-else statements:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Practice proper indentation in programming",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Explain if-else statement",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Write programs that use if-else statement to solve simple problems",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "2.3 Logical operators:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Explain the function of each logical operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Write programs that use logical operators to solve simple problems",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "If-Statement-Syntax",
          "level" : 2,
          "text" : "If Statement Syntax",
          "type" : "heading"
        },
        {
          "code" : [
            "\/\/ If statement",
            "if (\/* condition *\/) {",
            "    \/\/ code to execute if condition is true",
            "}",
            "",
            "\/\/ If-else statement",
            "if (\/* condition *\/) {",
            "    \/\/ code to execute if condition is true",
            "} else {",
            "    \/\/ code to execute if condition is false",
            "}",
            "",
            "\/\/ If-else if statement",
            "if (\/* condition 1 *\/) {",
            "    \/\/ code to execute if condition 1 is true",
            "} else if (\/* condition 2 *\/) {",
            "    \/\/ code to execute if condition 1 is false, but condition 2 is true",
            "} else { \/\/ you can have as many else if statements as you want",
            "    \/\/ code to execute if all conditions are false",
            "}"
          ],
          "syntax" : "c",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The condition must be a boolean expression, which evaluates to either true or false. Remember to wrap the condition in parentheses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usually, single-flow programs (ie. no branches or loops) are ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "sequential",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", meaning each instruction is executed in order,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one after the other. If statements introduce a ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "selection",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " structure, where the program can take different paths based on",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of a condition.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : " cannot exist without a preceding ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : ". You can have an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " without an ",
              "type" : "text"
            },
            {
              "code" : "else",
              "type" : "codeVoice"
            },
            {
              "text" : ", but not the other way around.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Do not use ",
              "type" : "text"
            },
            {
              "code" : "elif",
              "type" : "codeVoice"
            },
            {
              "text" : ", this is not Python.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Operators",
          "level" : 2,
          "text" : "Operators",
          "type" : "heading"
        },
        {
          "anchor" : "Comparison-Operators",
          "level" : 3,
          "text" : "Comparison Operators",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Basically just follow math.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "1 < 2 \/\/ true",
            "1 > 2 \/\/ false",
            "1 <= 2 \/\/ true",
            "1 >= 2 \/\/ false",
            "1 == 1 \/\/ true",
            "1 != 1 \/\/ false"
          ],
          "syntax" : "c",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that to compare two values, you use ",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ", not ",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ". The latter is an assignment operator, which assigns the value on",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the right to the variable on the left.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Math-Operators",
          "level" : 3,
          "text" : "Math Operators",
          "type" : "heading"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Function",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Addition",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Subtraction",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Multiplication",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Division",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "%",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Modulus (remainder)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "anchor" : "Logical-Operators",
          "level" : 3,
          "text" : "Logical Operators",
          "type" : "heading"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Operator",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Function",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "&&",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical AND",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "||",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical OR",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical NOT",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "anchor" : "Precedence",
          "level" : 3,
          "text" : "Precedence",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Certain operators have higher precedence, meaning they are evaluated first. From highest to lowest precedence:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "header" : "row",
          "rows" : [
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Family",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Operators",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Parentheses",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Unary (mutates a single value)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Arithmetic (Multiplicative)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "%",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Arithmetic (Additive)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Relational (inequality)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "<",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "<=",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : ">",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : ">=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Relational (equality)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "==",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "!=",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical AND",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "&&",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ],
            [
              [
                {
                  "inlineContent" : [
                    {
                      "text" : "Logical OR",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ],
              [
                {
                  "inlineContent" : [
                    {
                      "code" : "||",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            ]
          ],
          "type" : "table"
        },
        {
          "inlineContent" : [
            {
              "text" : "Within a single family, operators are evaluated from left to right. Use brackets to change the order of evaluation,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just like in math.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Indentation",
          "level" : 2,
          "text" : "Indentation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Whenever you have a block of code within a function, branch (if), or loop (for, while), you should indent the code inside",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the block. This makes it easier to read and understand the structure of your code.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ this code is not indented",
            "if (\/* condition *\/) {",
            "    \/\/ code to execute if condition is true",
            "    \/\/ this code is indented",
            "} else {",
            "    \/\/ code to execute if condition is false",
            "    \/\/ this code is also indented",
            "    if (\/* condition *\/) {",
            "        \/\/ this code is double indented",
            "    } else {",
            "        \/\/ this code is double indented",
            "    }",
            "}",
            "\/\/ this code is not indented"
          ],
          "syntax" : "c",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"Logo_NP.png": {
  "alt" : "NP Logo",
  "identifier" : "Logo_NP.png",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "1x",
        "light"
      ],
      "url" : "\/images\/Notes\/Logo_NP.png"
    }
  ]
},
"doc://Notes/documentation/Home": {
  "abstract" : [
    {
      "text" : "Notes. A lot of them. A jumble colosseum of notes. Jumbleum.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Home",
  "kind" : "article",
  "role" : "collection",
  "title" : "Jumbleum",
  "type" : "topic",
  "url" : "\/documentation\/home"
},
"doc://Notes/documentation/Notes/NP": {
  "abstract" : [
    {
      "text" : "Polytechnic content for Ngee Ann Polytechnic: Engineering Science 2025-2028",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Notes\/NP",
  "images" : [
    {
      "identifier" : "Logo_NP.png",
      "type" : "icon"
    }
  ],
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "NP",
  "type" : "topic",
  "url" : "\/documentation\/notes\/np"
},
"doc://Notes/documentation/Notes/Programming": {
  "abstract" : [
    {
      "text" : "Programming, mostly in C",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Notes\/documentation\/Notes\/Programming",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Programming",
  "type" : "topic",
  "url" : "\/documentation\/notes\/programming"
}
}
}